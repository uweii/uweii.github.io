<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Retry重试机制</title>
      <link href="/2019/12/08/retry/"/>
      <url>/2019/12/08/retry/</url>
      
        <content type="html"><![CDATA[<h1 id="Retry重试机制"><a href="#Retry重试机制" class="headerlink" title="Retry重试机制"></a><center>Retry重试机制</center></h1><blockquote><p>当我们调用一个接口时, 可能由于网络等原因造成第一次失败, 再去尝试就成功了, 这就是重试机制. </p><p>重试的解决方案有很多, 比如利用 try-catch-redo简单重试模式, 通过判断返回结果或监听异常来</p><p>判断是否重试, 具体可以看如下例子:</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一次重试</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一次重试</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>但是这种策略有个问题就是: 正常逻辑和重试逻辑强耦合. 基于这个问题, 我们可以使用 Spring-Retry工具, </p><p>该工具把重试操作模板定制化, 可以设置重试策略和回退策略. 同时 重试执行实例保证线程安全.</p></blockquote><h1 id="Retry重试机制的使用"><a href="#Retry重试机制的使用" class="headerlink" title="Retry重试机制的使用"></a>Retry重试机制的使用</h1><blockquote><p>首先在pom.xml中引入所需的依赖:</p><pre class=" language-java"><code class="language-java">        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>retry<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>retry<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>aspectj<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>aspectjweaver<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>添加完依赖后, 需要在入口类Application中添加注解<code>@EnableRetry</code>开启retry重试:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableRetry</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后我们新建个接口RetryService:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author wuwei * @Date 2019/12/8 8:22 下午 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RetryService</span> <span class="token punctuation">{</span>    AyMood <span class="token function">findByIdRetry</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接着创建实现类RetryServiceImpl:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author wuwei * @Date 2019/12/8 8:22 下午 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AyMoodService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>BusinessException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> maxAttempts <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>    backoff <span class="token operator">=</span> <span class="token annotation punctuation">@Backoff</span><span class="token punctuation">(</span>delay <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">,</span> multiplier <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> AyMood <span class="token function">findByIdRetry</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[findByIdRetry]方法重试失败了!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"retry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们在方法中故意抛出<code>自定义异常BusinessException</code>, </p><p><strong>关于自定义处理全局异常,请移步</strong>: <a href="https://blog.csdn.net/dummyo/article/details/103450968" target="_blank" rel="noopener">https://blog.csdn.net/dummyo/article/details/103450968</a></p><p><code>@Retryable</code>: </p><ul><li>value属性表示当出现哪些异常的时候触发重试</li><li>maxAttemps: 表示最大重试次数, 默认为3</li><li>delay表示重试的延迟时间</li><li>multiplier表示<span style="color:red">第n次重试是n-1次重试的多少倍</span>.[例子中: 失败后第一次过5秒后重试, 第二次过10秒, 20秒]</li></ul></blockquote><blockquote><p>我们写个测试方法来调用上述方法:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author wuwei * @Date 2019/12/8 10:24 下午 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/start"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    AyMoodService ayMoodService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/retry"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">findByIdRetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        AyMood ayMood <span class="token operator">=</span> ayMoodService<span class="token punctuation">.</span><span class="token function">findByIdRetry</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在浏览器中请求这个接口, 会发现控制台一直在进行重试, 5次后就返回结果.</p></blockquote><p><strong>Over</strong> </p><p>如果觉得需要更多技术干货, 来我的CSDN 和 GitHub哦</p><blockquote><p>CSDN:  <a href="https://blog.csdn.net/dummyo" target="_blank" rel="noopener">https://blog.csdn.net/dummyo</a></p><p>Github: <a href="https://github.com/uweii" target="_blank" rel="noopener">https://github.com/uweii</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Retry </tag>
            
            <tag> 重试机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot全局异常</title>
      <link href="/2019/12/08/exception/"/>
      <url>/2019/12/08/exception/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot全局异常使用"><a href="#SpringBoot全局异常使用" class="headerlink" title="SpringBoot全局异常使用"></a>SpringBoot全局异常使用</h1><h2 id="自定义错误界面"><a href="#自定义错误界面" class="headerlink" title="自定义错误界面"></a>自定义错误界面</h2><blockquote><p>Springboot自带的错误提示界面不太友好, 我们自己实现错误界面.</p><p>在src/main/resources/static 下面新建自定义错误页面404.html, 具体代码如下图所示:</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    主人, 我累了, 让我休息一会!!!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p>然后新建ErrorPageConfig配置类, 具体代码如下图所示:</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorPageConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> WebServerFactoryCustomizer<span class="token operator">&lt;</span>ConfigurableWebServerFactory<span class="token operator">></span> <span class="token function">customizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token operator">&lt;</span>ConfigurableWebServerFactory<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>ConfigurableWebServerFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ErrorPage errorPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorPage</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">,</span> <span class="token string">"/404.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                factory<span class="token punctuation">.</span><span class="token function">addErrorPages</span><span class="token punctuation">(</span>errorPage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>我的Controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/start"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>然后在随便选择一个uri来访问, 让程序返回404, 如浏览器访问<code>http://localhost:8080/start/sss</code> , 结果如下图:</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/006ewUczgy1g9ppythibwj32rk1lqtge.jpg" alt=""></p><blockquote><p>可以看到,已经达到自定义错误界面, 然后你可以自己美化一番.</p></blockquote><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><blockquote><p>在项目中我们会遇到各种各样的业务处理, 我们希望这些异常能被统一处理. </p><p>统一封装自定义业务异常BusinessException, 该类继承自<code>RuntimeException</code> 异常类, </p><p>并提供带有异常信息的构造方法, 具体代码如下:</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">BusinessException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BusinessException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>然后新建错误信息类ErrorInfo, 该类用于封装错误信息, 包括错误码, 具体代码如下:</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorInfo</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer SUCCESS <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer ERROR <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//错误码</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//错误信息</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略getter setter方法</span><span class="token punctuation">}</span></code></pre><blockquote><p>其次, 新建一个统一异常处理类<code>GlobalDefaultExceptionHandler</code>, 具体代码如下:</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 描述: 统一业务异常处理类 * @Author wuwei * @Date 2019/12/8 10:47 下午 */</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.example.activemq.demo"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalDefaultExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>BusinessException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果返回为json数据,就添加该注解</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> ErrorInfo <span class="token function">defaultErrorHandler</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        ErrorInfo errorInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        errorInfo<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        errorInfo<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        errorInfo<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>ErrorInfo<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> errorInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><ul><li><code>@RestControllerAdvice</code>: 定义统一的异常处理类, <code>basePackages</code>属性用于定义扫描<strong>哪些包</strong>, 默认可不配置.</li><li><code>@ExceptionHandler</code>:用于定义方法 <strong>针对</strong> 的异常类型, 可以传入多个需要捕获的异常类, 我们这就只处理前面自定义的<code>BusinessException</code>这个异常类.</li><li><code>@ResponseBody</code>: 如果返回的为json数据或其他对象, 就添加该注解.</li></ul></blockquote><blockquote><p>然后在<code>Controller</code>里定义一个方法, 该方法手动抛出我们自定义的<code>BusinessException</code>异常,</p><p>具体代码如下:</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author wuwei * @Date 2019/12/8 10:24 下午 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/start"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"业务异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><p>然后我们在浏览器中请求这个方法, 浏览器输入 <a href="http://localhost:8080/start/findAll" target="_blank" rel="noopener">http://localhost:8080/start/findAll</a></p><p>结果图如下:</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/006ewUczgy1g9pqf9qs1mj31ea0p80vw.jpg" alt=""></p><blockquote><p>okay, 我们已经达到了处理异常的目的.</p></blockquote><p><strong>Over</strong></p><p>如果觉得需要更多技术干货, 来我的CSDN 和 GitHub哦</p><blockquote><p>CSDN:  <a href="https://blog.csdn.net/dummyo" target="_blank" rel="noopener">https://blog.csdn.net/dummyo</a></p><p>Github: <a href="https://github.com/uweii" target="_blank" rel="noopener">https://github.com/uweii</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 全局异常处理 </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot使用事务</title>
      <link href="/2019/12/05/transaction-demo/"/>
      <url>/2019/12/05/transaction-demo/</url>
      
        <content type="html"><![CDATA[<h1 id="Springboot事务的使用"><a href="#Springboot事务的使用" class="headerlink" title="Springboot事务的使用"></a>Springboot事务的使用</h1><h2 id="Springboot事务介绍"><a href="#Springboot事务介绍" class="headerlink" title="Springboot事务介绍"></a>Springboot事务介绍</h2><blockquote><p>​    Springboot开启事务很简单, 只需要一个注解 <code>@Transactional</code> 就可以了, 因为在 Springboot 中已经默认对JPA, JDBC, Mybatis开启了事务, 引入它们依赖的时候, 事务就默认开启. 当然, 如果你需要用其他的ORM框架, 比如 Beat1SQL, 就需要自己配置相关的事务管理器.</p><p>​    Springboot用于配置事务的类为 <code>TransactionAutoConfiguration</code> , 在 Springboot中, 无须显示开启使用<code>@EnableTransactionManagement</code> .</p></blockquote><h2 id="类级别事务"><a href="#类级别事务" class="headerlink" title="类级别事务"></a>类级别事务</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">findByPK</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>上述代码在 UserServiceImpl 中开启事务, 在 <strong>类级别</strong> 上使用注释开启, 一般事务都是 <strong>加在服务层</strong> ,  <code>@Transactional</code>注解在类上, 意味着此类的所有 <strong>public</strong> 方法都是开启事务的.</p></blockquote><h2 id="方法级别事务"><a href="#方法级别事务" class="headerlink" title="方法级别事务"></a>方法级别事务</h2><blockquote><p>​    <code>@Transactional</code> 除了可以注解在类上, 还可以注解到<strong><u>方法</u></strong>上面. 当注解在类上时, 意味着此类中所有的public方法都是开启事务的. 如果 类级别 和 方法级别 同时使用了 <code>@Transactional</code> 注解, 那么方法级别注解就会 <strong>覆盖</strong> 类级别注解. </p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span>  userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        String error <span class="token operator">=</span> null<span class="token punctuation">;</span>        error<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我在 <code>save()</code>方法添加事务, 同时在save完成之后抛出<code>NullPointException</code>异常, 查看数据是否可以回滚.</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MybatisplusApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setDeletetag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"uwei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"217"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"777@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>​    运行后,由于<code>save</code> 是开启事务进行保存数据, 当执行insert后, 如果方法正常执行结束就会提交 <code>事务</code>, 然后数据就会更新到数据库, 但是上面再执行insert后, 抛出了一个 <strong>异常</strong>, 导致方法没有正常结束, 所以 <strong>数据会回滚</strong>, 检查下数据库, 数据库并没有新增这条user记录.</p><p>​    然后我取消在<code>UserserviceImpl</code>中<code>save()</code>方法上的<code>@Transactional</code>注解, 再执行一次, 可以发现即使insert后面抛出了异常, 数据还是会持久化到数据库.</p></blockquote><p><strong>Over</strong> </p><p>如果觉得需要更多技术干货, 来我的CSDN 和 GitHub哦</p><blockquote><p>CSDN:  <a href="https://blog.csdn.net/dummyo" target="_blank" rel="noopener">https://blog.csdn.net/dummyo</a></p><p>Github: <a href="https://github.com/uweii" target="_blank" rel="noopener">https://github.com/uweii</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java后台 </category>
          
          <category> 事务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring事务</title>
      <link href="/2019/12/05/spring-transaction/"/>
      <url>/2019/12/05/spring-transaction/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring注解事务行为"><a href="#Spring注解事务行为" class="headerlink" title="Spring注解事务行为"></a>Spring注解事务行为</h1><blockquote><p>当事务方法被另一个事务方法调用时, 必须指定事务应该如何传播. 例如, 方法可能继续在现有事务中运行, 也可能开启一个新事务, 并在自己的事务中运行. 事务的传播行为可以在 <code>@Transctional</code>的属性中指定, spring定义了 7 种传播行为, 具体如下图所示.</p></blockquote><h2 id="Spring传播行为"><a href="#Spring传播行为" class="headerlink" title="Spring传播行为"></a>Spring传播行为</h2><center>表1 Spring事务播行为</center><table><thead><tr><th align="center">传播行为</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">PROPAGATION_REQUIRED</td><td align="center">如果当前没有事务, 就新建一个事务; <br>如果已经存在一个事务, 就加入这个事务中</td></tr><tr><td align="center">PROPAGATION_SUPPORTS</td><td align="center">支持当前事务, 如果当前没有事务, 就以 <code>非事务方式执行</code></td></tr><tr><td align="center">PROPAGATION_MANDATORY</td><td align="center">使用当前的事务, 如果当前没有事务, 就 <code>抛出异常</code></td></tr><tr><td align="center">PROPAGATION_REQUIRES_NEW</td><td align="center">新建事务, 如果当前存在事务, 就 <code>把当前事务挂起</code></td></tr><tr><td align="center">PROPAGATION_NOT_SUPPORTED</td><td align="center">以非事务方式执行操作, 如果当前存在事务, 就<code>把当前事务挂起</code></td></tr><tr><td align="center">PROPAGATION_NEVER</td><td align="center">以非事务方式执行, 如果当前存在事务, <code>就抛出异常</code></td></tr><tr><td align="center">PROPAGATION_NESTED</td><td align="center">如果当前存在事务, 就在嵌套事务内执行; <br>如果当前没有事务, 就执行与PROPAGATION_REQUIRED类似的操作</td></tr></tbody></table><p>##并发事务所导致的问题</p><p>​    隔离级别定义了一个事务可能接受其他并发事务影响的程度. 在典型的应用程序中, 多个事务并发运行经常会操作相同的数据来完成各自的任务. 并发虽然是必须的, 可是会导致许多问题, 并发事务所导致的问题可以分为以下三类:</p><blockquote><ol><li>脏读(Dirty Read): 脏读发生在一个事务读取了另一个事务改写但尚未提交的数据. 如果改写在稍后被回滚了, name第一个事务获取的数据就是无效的.</li><li>不可重复读(Nonrepeatable Read): 不可重复读发生在一个事务执行相同的查询两次或两次以上, 但是每次都得到不同的数据时. 通常是因为另一个并发事务在两次查询期间更新了数据</li><li>幻读(Phantom Read): 幻读与不可重复读类似, 发生在一个事务(T1)读取了几行数据, 接着另一个并发事务(T2)插入了一些数据时. 在随后的查询中, 第一个事务(T1)就会发现多了一些原本不存在的记录.</li></ol></blockquote><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><center>表2 Spring事务隔离级别</center><table><thead><tr><th align="center">隔离级别</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">ISOLATION_DEFAULT</td><td align="center">使用数据库默认的事务隔离级别, 另外4个与JDBC的隔离级别相对应</td></tr><tr><td align="center">ISOLATION_READ_UNCOMMITTED</td><td align="center">事务最低的隔离级别, 允许另一个事务可以看到这个事务未提交的数据. 这种隔离级别会产生<code>脏读</code>, <code>不可重复度</code>和<code>幻读</code></td></tr><tr><td align="center">ISOLATION_READ_COMMITTED</td><td align="center">使用当前的事务, 如果当前没有事务, 就抛出异常</td></tr><tr><td align="center">ISOLATION_REPEATABLE_READ</td><td align="center">新建事务, 如果当前存在事务, 就把当前事务挂起</td></tr><tr><td align="center">ISOLATION_SERIALIZABLE</td><td align="center">以非事务方式执行操作, 如果当前存在事务, 就把当前事务挂起</td></tr></tbody></table><blockquote><p><code>@Transactional</code>可以通过propagation属性定义事务行为, 属性值分别为REQUIRED, SUPPORTS, MANDATORY, REQUIRES_NEW, NOT_SUPPORTED, NEVER 以及NESTED, 分别对应表1中的内容. 可以通过<code>isolation</code>属性定义隔离级别, 属性值分别为 DEFAULT, READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, 以及 SERILIZABLE.</p><p>还可以通过 timeout 属性设置事务过期时间, 通过 readOnly 指定当前事务是否是 <code>只读事务</code> , 通过 RollbackFor(noRollbackFor) 指定哪个或者哪些异常可以引起 (或不可以引起) 事务 回滚.</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 事务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> transaction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot-annotation</title>
      <link href="/2019/12/04/springboot-annotation/"/>
      <url>/2019/12/04/springboot-annotation/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring常用注解含义"><a href="#Spring常用注解含义" class="headerlink" title="Spring常用注解含义"></a>Spring常用注解含义</h1><blockquote><p><code>@Service</code> Springboot会自动扫描到@Service注解的类, 并把这些类纳入Spring容器中管理. 也可以用@Component注解, 只是@Service注解更能表明该类是服务层类.</p><p><code>@Component</code> 泛指组件, 当组件不好归类的时候, 我们可以使用这个注解进行标注.</p><p><code>@Repository</code> 持久层组件, 用于标注数据访问的组件, 即DAO层.</p><p><code>@Resource</code> 这个注解属于J2EE, 默认按<strong>名称</strong>进行装配, 名称可以通过<code>name</code>属性进行指定. 如果没有指定<code>name</code>属性, 当注解写在字段上时, 就默认取<strong>字段名</strong>进行查找. 如果注解写在<code>setter</code>方法上, 就默认取 <strong>属性名</strong> 进行装配. 当找不到与名称匹配的 bean 时, 才按照 <strong>类型</strong> 进行装配. 具体代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"userRepository"</span><span class="token punctuation">)</span><span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span></code></pre><p><code>@Autowired</code> 这个注解属于 Spring, 默认按 <strong><code>类型</code></strong> 装配. 默认情况下, 要求依赖对象必须存在, 如果要允许<strong>null</strong>值, 那么可以设置它的<u> required </u>属性为 false, 如 <code>@Autowired(required = false)</code> ; 如果想使用 名称 装配, 那么可以结合 <code>@Qualifier</code>注解使用. 具体代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userRepository"</span><span class="token punctuation">)</span><span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span></code></pre></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java后台 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring注解 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-data-jpa</title>
      <link href="/2019/12/03/spring-data-jpa/"/>
      <url>/2019/12/03/spring-data-jpa/</url>
      
        <content type="html"><![CDATA[<p>​    <code>JPA(Java Persistence API)</code> 是Sun官方提出的 Java <code>持久化规范</code> . 所谓规范即定义 <strong>标准规则</strong> , 不提供实现. 而</p><p>JPA的主要实现有 <code>Hiberbnate</code> , <code>EclipseLink</code> , <code>OpenJPA</code>等. JPA是一套规范, 不是一套产品. Hiberbnate 是一套产</p><p>品, 如果这些产品实现了JPA规范,那么我们可以称其为JPA的实现产品.</p><p>​    </p><p>Spring Data JPA 是 Spring Data 的一个子项目, 通过提供基于 <code>JPA</code> 的 Repository 极大地减少了JPA作为数据访</p><p>问方案的代码量. 通过Spring Data JPA框架, 开发者可以省略实现持久层业务逻辑的工作, 唯一要做的就是声明持久</p><p>层的接口, 其他都交给Spring Data JPA 来完成.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-data-jpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot集成druid</title>
      <link href="/2019/12/01/springboot-druid/"/>
      <url>/2019/12/01/springboot-druid/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot集成Druid"><a href="#SpringBoot集成Druid" class="headerlink" title="SpringBoot集成Druid"></a>SpringBoot集成Druid</h1><h2 id="先添加druid依赖"><a href="#先添加druid依赖" class="headerlink" title="先添加druid依赖"></a>先添加druid依赖</h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>druid<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h2 id="application-properties相关配置"><a href="#application-properties相关配置" class="headerlink" title="application.properties相关配置"></a>application.properties相关配置</h2><pre class=" language-java"><code class="language-java">spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>common<span class="token operator">?</span>characterEncoding<span class="token operator">=</span>utf8spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token operator">=</span>rootspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token operator">=</span>rootspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver###  数据源类别spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>type<span class="token operator">=</span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource###  初始化大小<span class="token punctuation">,</span> 最小<span class="token punctuation">,</span> 最大spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>initial<span class="token operator">-</span>size<span class="token operator">=</span><span class="token number">5</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>min<span class="token operator">-</span>idle<span class="token operator">=</span><span class="token number">5</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>max<span class="token operator">-</span>active<span class="token operator">=</span><span class="token number">20</span>### 配置获取连接等待超时时间<span class="token punctuation">,</span> 单位是毫秒spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>max<span class="token operator">-</span>wait<span class="token operator">=</span><span class="token number">60000</span>### 配置间隔多久才进行一次检测<span class="token punctuation">,</span> 检测需要关闭的空闲连接<span class="token punctuation">,</span> 单位是毫秒spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>time<span class="token operator">-</span>between<span class="token operator">-</span>eviction<span class="token operator">-</span>runs<span class="token operator">-</span>millis<span class="token operator">=</span><span class="token number">60000</span>### 配置一个连接在池中最小生存时间<span class="token punctuation">,</span> 单位是毫秒spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>min<span class="token operator">-</span>evictable<span class="token operator">-</span>idle<span class="token operator">-</span>time<span class="token operator">-</span>millis<span class="token operator">=</span><span class="token number">300000</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>validation<span class="token operator">-</span>query<span class="token operator">=</span>select <span class="token number">1</span> from dualspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>test<span class="token operator">-</span><span class="token keyword">while</span><span class="token operator">-</span>idle<span class="token operator">=</span><span class="token boolean">true</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>test<span class="token operator">-</span>on<span class="token operator">-</span>borrow<span class="token operator">=</span><span class="token boolean">false</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>test<span class="token operator">-</span>on<span class="token operator">-</span><span class="token keyword">return</span><span class="token operator">=</span><span class="token boolean">false</span>###  打开PSCache<span class="token punctuation">,</span> 并指定每个连接上PSCache的大小spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token operator">-</span>prepared<span class="token operator">-</span>statements<span class="token operator">=</span><span class="token boolean">true</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>max<span class="token operator">-</span>pool<span class="token operator">-</span>prepared<span class="token operator">-</span>statement<span class="token operator">-</span>per<span class="token operator">-</span>connection<span class="token operator">-</span>size<span class="token operator">=</span><span class="token number">20</span>###  配置监控统计拦截的filters<span class="token punctuation">,</span> 去掉后监控界面的SQL无法统计<span class="token punctuation">,</span> <span class="token string">'wall'</span>用于防火墙spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>filters<span class="token operator">=</span>stat<span class="token punctuation">,</span>wall### 通过connectProperties属性来打开mergeSql功能<span class="token punctuation">,</span> 慢SQL记录spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>connection<span class="token operator">-</span>properties<span class="token operator">=</span>druid<span class="token punctuation">.</span>stat<span class="token punctuation">.</span>mergeSql<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>druid<span class="token punctuation">.</span>stat<span class="token punctuation">.</span>slowSqlMillis<span class="token operator">=</span><span class="token number">5000</span>### 合并多个DruidDataSource的监控数据#spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>use<span class="token operator">-</span>global<span class="token operator">-</span>data<span class="token operator">-</span>source<span class="token operator">-</span>stat<span class="token operator">=</span><span class="token boolean">true</span></code></pre><h2 id="注册servlet和filter"><a href="#注册servlet和filter" class="headerlink" title="注册servlet和filter"></a>注册servlet和filter</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">druidStatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//提供类的进行注册</span>        ServletRegistrationBean servletRegistrationBean                <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加初始化参数, initParams</span>        <span class="token comment" spellcheck="true">//白名单,允许</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启后,127.0.0.1访问时会被拒绝</span><span class="token comment" spellcheck="true">//        servletRegistrationBean.addInitParameter("deny", "127.0.0.1");</span>        <span class="token comment" spellcheck="true">//IP黑名单 (存在共同时, deny优先于allow)</span>        <span class="token comment" spellcheck="true">//如果满足deny, 就提示</span>        <span class="token comment" spellcheck="true">//登录查看信息的账号和密码</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否能够重置数据</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"resetEnable"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> servletRegistrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">druidStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        FilterRegistrationBean filterRegistrationBean                <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加过滤规则</span>        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加需要忽略的格式信息</span>        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span>                <span class="token string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filterRegistrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>我们设置了允许127.0.0.1的ip来访问我们的servlet</p><p>并且设置了可以使用 <strong>admin</strong> 和 <strong>123456</strong> 作为账号密码来访问druid的web管理界面</p></blockquote><h2 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h2><h3 id="在浏览器输入"><a href="#在浏览器输入" class="headerlink" title="在浏览器输入"></a>在浏览器输入</h3><p><code>http://127.0.0.1:8080/druid/index.html</code>便可访问druid管理界面</p><p><img src="https://i.loli.net/2019/12/01/FlSPaUEYdWBm5Lp.png" alt="image.png"></p><h3 id="如果设置以下参数"><a href="#如果设置以下参数" class="headerlink" title="如果设置以下参数"></a>如果设置以下参数</h3><p><code>servletRegistrationBean.addInitParameter("deny", "127.0.0.1");</code> 那么访问如下:</p><p><img src="https://i.loli.net/2019/12/01/dNqbrGIm3LcZeyu.png" alt="image.png"></p><h2 id="现在我们创建5个线程来连接数据库"><a href="#现在我们创建5个线程来连接数据库" class="headerlink" title="现在我们创建5个线程来连接数据库"></a>现在我们创建5个线程来连接数据库</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BackJob</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">execQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> User <span class="token function">mapRow</span><span class="token punctuation">(</span>ResultSet resultSet<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>                User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">findColumn</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">findColumn</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">findColumn</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">findColumn</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> user<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="上面的User类"><a href="#上面的User类" class="headerlink" title="上面的User类"></a>上面的User类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", email='"</span> <span class="token operator">+</span> email <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="我的数据库信息"><a href="#我的数据库信息" class="headerlink" title="我的数据库信息"></a>我的数据库信息</h3><blockquote><p>注意,使用 <code>@Scheduled(fixedDelay = 1000)</code> 表示每隔1秒执行一次, 要使用这个注解, 还需要在Application类上, 加上 <strong>@EnableScheduling</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MysqlApplication</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MysqlApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><hr><p>也就是说, 现在每秒有5个线程进行连接数据库查询, 然后我们去web控制台查看一下:</p><p><img src="https://i.loli.net/2019/12/01/fFbZIDmrGqlOy2S.png" alt="image.png"></p><hr><p><strong>Over</strong> </p><p>如果觉得需要更多技术干货, 来我的CSDN 和 GitHub哦</p><blockquote><p>CSDN:  <a href="https://blog.csdn.net/dummyo" target="_blank" rel="noopener">https://blog.csdn.net/dummyo</a></p><p>Github: <a href="https://github.com/uweii" target="_blank" rel="noopener">https://github.com/uweii</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot+druid </tag>
            
            <tag> druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring_mybatis_pagehelper</title>
      <link href="/2019/11/30/spring-mybatis-pagehelper/"/>
      <url>/2019/11/30/spring-mybatis-pagehelper/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot集成tkbatis-并借助PageHelper进行分页"><a href="#springboot集成tkbatis-并借助PageHelper进行分页" class="headerlink" title="springboot集成tkbatis,并借助PageHelper进行分页"></a>springboot集成tkbatis,并借助PageHelper进行分页</h1><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><blockquote><p>spring依赖</p><p>jdbc依赖</p><p>tkmybatis依赖</p><p>pagehelper依赖</p><p>pagehelper-autoconfigure依赖</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>jdbc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>tk<span class="token punctuation">.</span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mapper<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>pagehelper<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>pagehelper<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>autoconfigure<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>pagehelper<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><blockquote><p>依赖中的pagehelper依赖相关的有3个, 不要掉哦</p><blockquote><ul><li>pagehelper</li><li>pagehelper-spring-boot-autoconfigure</li><li>pagehelper-spring-boot-starter</li></ul></blockquote></blockquote><h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><img src="https://i.loli.net/2019/11/30/Pqp2ZMJg6ilwCIS.png" alt="image.png" style="zoom:33%;"><h3 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h3><ul><li><p>application.properties:</p><pre class=" language-java"><code class="language-java">datasource<span class="token punctuation">.</span>jdbc<span class="token operator">-</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>common<span class="token operator">?</span>characterEncoding<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>datasource<span class="token punctuation">.</span>driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverdatasource<span class="token punctuation">.</span>username<span class="token operator">=</span>rootdatasource<span class="token punctuation">.</span>password<span class="token operator">=</span>rootspring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token operator">=</span>developserver<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">9090</span><span class="token operator">/</span>#控制台打印mybatis语句logging<span class="token punctuation">.</span>level<span class="token punctuation">.</span>com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>demo<span class="token operator">=</span>debugmybatis<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>log<span class="token operator">-</span>impl<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>StdOutImpl</code></pre></li></ul><ul><li><p>配置数据源</p><ol><li><p>配置datasource:</p><p><code>pprefix = "datasource"</code>  在application.properties里找以 <code>datasource</code>开头的配置,然后spring自动创建datasource</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol></li></ul><ol start="2"><li><p>配置sqlSessionFactory</p><p><code>@Qualifier("datasource")</code>  是指定名为 <strong>datasource</strong> 的bean, 也就是上面的<code>datasource</code>方法, 默认以方法名为bean的名称(<em>如果方法名为<code>Datasource()</code>, bean的名称为 <strong>dataSource</strong>, 首字母变小写</em>)</p><pre class=" language-java"><code class="language-java">     <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> SqlSessionFactory <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>     SqlSessionFactoryBean sqlSessionFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>     sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setVfs</span><span class="token punctuation">(</span>SpringBootVFS<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ResourcePatternResolver resourcePatternResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//设置mapper.xml的位置</span>     sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span>resourcePatternResolver<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"classpath:mapper/*.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li></ol><ol start="3"><li><p>配置mapper</p><pre class=" language-java"><code class="language-java">      <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MapperScannerConfigurer <span class="token function">mapperScannerConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MapperScannerConfigurer mapperScannerConfigurer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperScannerConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapperScannerConfigurer<span class="token punctuation">.</span><span class="token function">setSqlSessionFactoryBeanName</span><span class="token punctuation">(</span><span class="token string">"sqlSessionFactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置mapper接口的位置</span>        mapperScannerConfigurer<span class="token punctuation">.</span><span class="token function">setBasePackage</span><span class="token punctuation">(</span><span class="token string">"com.example.mybatisplus.demo.mapper.primary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置的通用mapper, 集成tkbatis的多个接口,可以实现大多数增删改查方法</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"mappers"</span><span class="token punctuation">,</span> <span class="token string">"com.example.mybatisplus.demo.mapper.core.CustomMapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapperScannerConfigurer<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mapperScannerConfigurer<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><h3 id="业务处理层"><a href="#业务处理层" class="headerlink" title="业务处理层"></a>业务处理层</h3><ul><li><p>UserService.java</p><blockquote><p>定义一个简单的接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    ResultPage<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNo<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>UserServiceImpl.java</p><blockquote><p>实现UserService接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ResultPage<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNo<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//分页的主要方法, pageNo: 第几页  pageSize: 每页条数</span>        PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNo<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建condition</span>        Condition condition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Condition</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Example<span class="token punctuation">.</span>Criteria criteria <span class="token operator">=</span> condition<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//条件类似于: select * from User where name = 'wuwei'</span>        criteria<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"wuwei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByCondition</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>        PageInfo<span class="token operator">&lt;</span>User<span class="token operator">></span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        ResultPage<span class="token operator">&lt;</span>User<span class="token operator">></span> resultPage <span class="token operator">=</span> <span class="token keyword">new</span>                <span class="token class-name">ResultPage</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pageInfo<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pageInfo<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pageInfo<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultPage<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>ResultPage.java</p><blockquote><p>封装分页信息的类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author wuwei * @Date 2019/11/28 10:52 下午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultPage</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pageNo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> allPages<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ResultPage</span><span class="token punctuation">(</span>T data<span class="token punctuation">,</span> <span class="token keyword">int</span> pageNo<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> <span class="token keyword">int</span> allPages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageNo <span class="token operator">=</span> pageNo<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize <span class="token operator">=</span> pageSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>allPages <span class="token operator">=</span> allPages<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pageNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPageNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageNo <span class="token operator">=</span> pageNo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pageSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPageSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize <span class="token operator">=</span> pageSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAllPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> allPages<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAllPages</span><span class="token punctuation">(</span><span class="token keyword">int</span> allPages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>allPages <span class="token operator">=</span> allPages<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>CustomMapper接口</p><blockquote><p>继承tkbatis的接口, 这些接口里面有通用方法, 我们可以不用写sql语句,</p><p>上文中,我们在  <strong>mapperScannerConfigurer</strong> 中配置了此CustomMapper</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomMapper</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span>        <span class="token class-name">IdsMapper</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span>        ConditionMapper<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span>        SelectMapper<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span>        Mapper<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>UserMapper继承CustomMapper</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">CustomMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ul><p>###控制层controller</p><ul><li><p>ResultResponse</p><blockquote><p>作为一个响应接口返回值的类, 对接口返回进行封装</p><p>达到是接口返回值结构 <strong>统一</strong> 的目的</p></blockquote><pre><code>public class ResultResponse&lt;T&gt; {    private T data;    private int code;    private String msg;    public T getData() {        return data;    }    public void setData(T data) {        this.data = data;    }    public int getCode() {        return code;    }    public void setCode(int code) {        this.code = code;    }    public String getMsg() {        return msg;    }    public void setMsg(String msg) {        this.msg = msg;    }}</code></pre></li><li><p>BaseController</p><blockquote><p>作为controller的基类, 提供方法将接口数据统一封装成ResultResponse类型的数据</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseController</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> ResultResponse<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">handleResult</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">handleResult</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> ResultResponse<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">handleResult</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span><span class="token punctuation">{</span>        ResultResponse resultResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resultResponse<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        resultResponse<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resultResponse<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultResponse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ResultResponse<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">handleResult</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        ResultResponse resultResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resultResponse<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        resultResponse<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        resultResponse<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resultResponse<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>UserController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/start"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">BaseController</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/mybatisplus"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>ResultPage<span class="token operator">&lt;</span>User<span class="token operator">>></span> <span class="token function">getUSer</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNo<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">handleResult</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getUserByPage</span><span class="token punctuation">(</span>pageNo<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>User类</p><blockquote><p>model</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">public</span> Long <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><p><img src="https://i.loli.net/2019/11/30/IVeT3XnEJvHRDL7.png" alt="image.png"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p><img src="https://i.loli.net/2019/11/30/H7hmBeoitV2jqzA.png" alt="image.png"></p><p><em>ps:</em> 如果需要完整代码, GitHub  <a href="https://github.com/uweii/springboot-mybatis-pagehelper" target="_blank" rel="noopener">springboot+mybatis+pagehelper简单demo</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> tkbatis </tag>
            
            <tag> pagehelper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致橡树</title>
      <link href="/2019/11/30/ifiloveu/"/>
      <url>/2019/11/30/ifiloveu/</url>
      
        <content type="html"><![CDATA[<h1 id="致橡树"><a href="#致橡树" class="headerlink" title="致橡树"></a>致橡树</h1><p>我如果爱你，</p><p>绝不像攀援的凌霄花，<br>借你的高枝炫耀自己；<br>绝不学痴情的鸟儿，<br>为绿荫重复单调的歌曲；<br>也不止像泉源，<br>常年送来清凉的慰藉；<br>也不止像险峰，<br>增加你的高度，<br>衬托你的威仪。<br>甚至日光，<br>甚至春雨。<br>不，<br>这些都还不够！<br>我必须是你近旁的一株木棉，<br>作为树的形象和你站在一起。<br>根，<br>紧握在地下；<br>叶，<br>相触在云里。<br>每一阵风过，<br>我们都互相致意，<br>但没有人，<br>听懂我们的言语。<br>你有你的铜枝铁干，<br>像刀，<br>像剑，<br>也像戟；<br>我有我红硕的花朵，<br>像沉重的叹息，<br>又像英勇的火炬。<br>我们分担寒潮、<br>风雷、<br>霹雳；<br>我们共享雾霭、<br>流岚、<br>虹霓。<br>仿佛永远分离，<br>却又终身相依。<br>这才是伟大的爱情，<br>坚贞就在这里：<br>爱——<br>不仅爱你伟岸的身躯，<br>也爱你坚持的位置，<br>足下的土地。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 诗文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美文 </tag>
            
            <tag> 致橡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>morning</title>
      <link href="/2019/11/30/morning/"/>
      <url>/2019/11/30/morning/</url>
      
        <content type="html"><![CDATA[<p>一大早起来，使用mac制作windwos10启动U盘。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 早晨 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>goodnight</title>
      <link href="/2019/11/30/goodnight/"/>
      <url>/2019/11/30/goodnight/</url>
      
        <content type="html"><![CDATA[<h1 id="偶-然"><a href="#偶-然" class="headerlink" title="偶 然"></a>偶 然</h1><p>我是天空里的一片云，</p><p>偶尔投影在你的波心。</p><p>你不必讶异，更无须欢喜，</p><p>在转瞬间消灭了踪影。</p><p>你我相逢在黑夜的海上，</p><p>你有你的，我有我的，方向；</p><p>你记得也好，最好你忘掉，</p><p>在这交会时互放的光亮！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 晚上 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 晚安 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今日总结</title>
      <link href="/2019/11/27/random/"/>
      <url>/2019/11/27/random/</url>
      
        <content type="html"><![CDATA[<h2 id="what-happeded-tonight"><a href="#what-happeded-tonight" class="headerlink" title="what happeded tonight"></a>what happeded tonight</h2><p>今天下班回来，和小皮看了一集 <code>终极挑战</code> ，看得哈哈大笑，还一起煮了肥牛卷吃。然后我就来开始搭建博客了。使用的是<strong>github</strong> + <strong>hexo</strong>。这是第二次搭建了，上一次搭建的时候还是在大学呢！大约是两年前吧，时间过得真快啊！现在的我已经工作了，因为最近在看一些技术博客和专业相关的书籍，所以想做笔记的时候可以有个地方可写.</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="what-to-do-tomorrow"><a href="#what-to-do-tomorrow" class="headerlink" title="what to do tomorrow"></a>what to do tomorrow</h2><ul><li><code>早上坐车时</code>看<strong>多线程，高并发</strong>相关的技术博客</li><li><code>工作时</code>认真写代码，记得工作时要认真对待。还有保持好脾气。</li><li><code>午休时</code>看<strong>《鸟哥的Linux私房菜》</strong>。</li><li><code>晚上坐车时</code>看<code>多线程``高并发</code>相关的技术博客</li></ul><p><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><h2 id="每日一图"><a href="#每日一图" class="headerlink" title="每日一图"></a>每日一图</h2><p><img src="https://ftp.bmp.ovh/imgs/2019/11/ef12f6253c3a400d.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 随便写写 </tag>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
